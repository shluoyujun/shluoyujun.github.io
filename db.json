{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"source/_posts/docker常用命令.md","hash":"9ce8e88707e9e58211b7ace75418ba8cb5c3c7b7","modified":1559467172197},{"_id":"source/_posts/eclipse导入maven-web项目注意事项.md","hash":"607554170413a927e3ff529b7e868d8c6a413bfb","modified":1559467172199},{"_id":"source/_posts/mysql一种千万数量级表的join方法.md","hash":"900d0ba149cba81d4cb7740eda82863e53233c3d","modified":1559467172198},{"_id":"source/_posts/mysql批量插入数据.md","hash":"c2b16d07d4546b0d4862548fdf485a0950c17806","modified":1559467172198},{"_id":"source/_posts/python开发环境配置.md","hash":"fd3a2e5d672121332b4e83e51775f1f3d5225eae","modified":1559467172199},{"_id":"source/_posts/ttt.md","hash":"85752a4ddf06830e06bee9c8db131d146421d2a0","modified":1559467172197},{"_id":"source/_posts/ubuntu14-04安装fasttext.md","hash":"ea9bb728b1ca3366ea4e0522d9894cff0dccf7fb","modified":1559467172198},{"_id":"source/_posts/ubuntu安装mysql并开启远程连接.md","hash":"f7979fe9c0a911992a99109da83d16284c02885b","modified":1559467172199},{"_id":"source/_posts/ubuntu系统mysql修改数据存储位置.md","hash":"ed85557b818fb2d3f4dd939a7d37099324bdcc77","modified":1559467172199},{"_id":"source/_posts/记事本编码问题小记.md","hash":"849b8f7d04ed10408ac788118e970f6b39422c12","modified":1559467172198},{"_id":"source/about/index.md","hash":"9c8c921169e72b2f6a86f87f0bd26c62da777542","modified":1559467172200},{"_id":"source/categories/index.md","hash":"a408cd2e2a9251417827c4781b8fc07c02cdc63c","modified":1559467172201},{"_id":"source/tags/index.md","hash":"c645dcfaa9be0a5ef0104430eceae8cf3c86d91e","modified":1559467172200},{"_id":"public/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424732},{"_id":"public/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424732},{"_id":"public/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424732},{"_id":"public/2019/06/02/ttt/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424732},{"_id":"public/2018/06/23/python开发环境配置/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424733},{"_id":"public/2017/08/18/ubuntu系统mysql修改数据存储位置/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424733},{"_id":"public/2017/08/05/docker常用命令/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424733},{"_id":"public/2017/07/18/mysql一种千万数量级表的join方法/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424733},{"_id":"public/2017/07/18/mysql批量插入数据/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424733},{"_id":"public/2017/06/16/ubuntu安装mysql并开启远程连接/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424733},{"_id":"public/2017/06/16/ubuntu14-04安装fasttext/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424733},{"_id":"public/2017/04/29/eclipse导入maven-web项目注意事项/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424733},{"_id":"public/2017/04/02/记事本编码问题小记/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424733},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424733},{"_id":"public/categories/command/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424733},{"_id":"public/categories/environment/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424733},{"_id":"public/categories/performance/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424734},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424734},{"_id":"public/archives/2017/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424734},{"_id":"public/archives/2017/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424734},{"_id":"public/archives/2017/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424734},{"_id":"public/archives/2017/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424734},{"_id":"public/archives/2017/08/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424734},{"_id":"public/archives/2018/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424734},{"_id":"public/archives/2018/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424734},{"_id":"public/archives/2019/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424734},{"_id":"public/archives/2019/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424734},{"_id":"public/tags/linux/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424734},{"_id":"public/tags/docker/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424734},{"_id":"public/tags/web/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424735},{"_id":"public/tags/eclipse/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424735},{"_id":"public/tags/java/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424736},{"_id":"public/tags/mysql/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424736},{"_id":"public/tags/ubuntu/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424736},{"_id":"public/tags/python/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424736},{"_id":"public/tags/deeplearning/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424736},{"_id":"public/tags/tool/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559467424736}],"Category":[{"name":"command","_id":"cjweqn1v30003vwptkuwd8lvq"},{"name":"environment","_id":"cjweqn1v80008vwptuy2dj2o4"},{"name":"performance","_id":"cjweqn1vb000dvwptpi3w55ff"}],"Data":[],"Page":[{"title":"about","date":"2017-06-08T15:12:20.000Z","_content":"\nKeep healthy\nWork hard\nBe nice\n\nContact me: shh_luoyj@foxmail.com","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-06-08 23:12:20\n---\n\nKeep healthy\nWork hard\nBe nice\n\nContact me: shh_luoyj@foxmail.com","updated":"2019-06-02T09:19:32.200Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjweqn1v10001vwpti60gp04q","content":"<p>Keep healthy<br>Work hard<br>Be nice</p>\n<p>Contact me: <a href=\"mailto:shh_luoyj@foxmail.com\" target=\"_blank\" rel=\"noopener\">shh_luoyj@foxmail.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Keep healthy<br>Work hard<br>Be nice</p>\n<p>Contact me: <a href=\"mailto:shh_luoyj@foxmail.com\" target=\"_blank\" rel=\"noopener\">shh_luoyj@foxmail.com</a></p>\n"},{"title":"tags","date":"2017-06-08T15:12:35.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-06-08 23:12:35\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-06-02T09:19:32.200Z","path":"tags/index.html","layout":"page","_id":"cjweqn1vq001kvwptkz4qcb7q","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-06-08T15:12:43.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-06-08 23:12:43\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-06-02T09:19:32.201Z","path":"categories/index.html","layout":"page","_id":"cjweqn1vr001lvwptexzxnjm7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"docker常用命令","date":"2017-08-05T04:16:50.000Z","_content":"\ndocker的安装以及一些配置参考\n```\nhttps://github.com/widuu/chinese_docker/blob/master/installation/ubuntu.md#Ubuntu%E5%AE%89%E8%A3%85Docker\n```\n\n<!--more-->\n\n目录挂载\n```\nmkdir /work\nsudo mkfs.ext4 /dev/vdc\nsudo mount /dev/vdc /work\n```\n或者解除挂载\n```\nsudo umount  /dev/vdc /work\n```\n查看挂载情况\n```\ndf -h\n```\n\n可参考\n```\nhttps://gist.github.com/gaoyifan/019ad7766f030ab5be50\n```\n\n更改镜像和容器的保存路径\n```\nsudo docker info | grep \"Docker Root Dir\" 查看存储位置\nsudo vi /etc/default/docker\n```\n添加一行\n```\nDOCKER_OPTS=\"-g /mnt/docker\"\nsudo service docker restart\n```\n\n查看docker信息\n```\ndocker info\n```\n\n查看运行中的容器\n```\ndocker ps\n```\n\n查看所有容器\n```\ndocker ps -a\n```\n\n查看本地镜像\n```\ndocker images\n```\n删除镜像\n```\ndocker rmi $imagename\n```\n\n停止一个正在运行的容器\n```\ndocker stop $dockername\n```\n\n删除所有停止的容器\n```\ndocker rm $(docker ps -a -q)\n```\n\n启动一个容器\n```\ndocker start $dockername\n```\n\n进入一个容器\n```\ndocker exec -i -t $dockername /bin/sh\n```\ndocker run的参数说明，例如有用命令启动一个容器\n```\ndocker run --name $\"dDocker\" -d -p 8080:8888 -v /home/tensorflow:/home/jovyan/work jupyter/tensorflow-notebook start-notebook.sh --NotebookApp.token=''\n```\n\n--name 为容器指定一个名字，如果未指定会随机分配\n-d 保持后台运行\n-p 8080:8888 端口映射，8080是宿主机器的端口号，8888是docker端口号，访问时输入 [宿主机器ip：8080]\n-v /home/tensorflow:/work/jovnan 目录映射，可以理解为共享目录。docker容器是临时的，这个参数为了是代码和数据持久化保存。\njupyter/tensorflow-notebook 镜像名称，如果本地不存在，docker会自动从hub.docker.com上获取\n\n常见问题：\n1 Couldn’t connect to Docker daemon at http+unix://var/run/docker.sock - is it running? \n有次重启虚拟机后突然遇到这个问题，解决方法：\n\n```\nsudo vi /etc/default/docker\n```\n\n添加一行\n\n```\nDOCKER_OPTS=\"-H tcp://127.0.0.1:4243 -H unix:///var/run/docker.sock\"\n```\n\n再重启docker服务\n\n```\nsudo service docker restart\n```\n\nnote: 重启机器的之前最好先把运行中的docker容器停了\n","source":"_posts/docker常用命令.md","raw":"---\ntitle: docker常用命令\ndate: 2017-08-05 12:16:50\ncategories:\n\t - command\ntags: [linux, docker]\n---\n\ndocker的安装以及一些配置参考\n```\nhttps://github.com/widuu/chinese_docker/blob/master/installation/ubuntu.md#Ubuntu%E5%AE%89%E8%A3%85Docker\n```\n\n<!--more-->\n\n目录挂载\n```\nmkdir /work\nsudo mkfs.ext4 /dev/vdc\nsudo mount /dev/vdc /work\n```\n或者解除挂载\n```\nsudo umount  /dev/vdc /work\n```\n查看挂载情况\n```\ndf -h\n```\n\n可参考\n```\nhttps://gist.github.com/gaoyifan/019ad7766f030ab5be50\n```\n\n更改镜像和容器的保存路径\n```\nsudo docker info | grep \"Docker Root Dir\" 查看存储位置\nsudo vi /etc/default/docker\n```\n添加一行\n```\nDOCKER_OPTS=\"-g /mnt/docker\"\nsudo service docker restart\n```\n\n查看docker信息\n```\ndocker info\n```\n\n查看运行中的容器\n```\ndocker ps\n```\n\n查看所有容器\n```\ndocker ps -a\n```\n\n查看本地镜像\n```\ndocker images\n```\n删除镜像\n```\ndocker rmi $imagename\n```\n\n停止一个正在运行的容器\n```\ndocker stop $dockername\n```\n\n删除所有停止的容器\n```\ndocker rm $(docker ps -a -q)\n```\n\n启动一个容器\n```\ndocker start $dockername\n```\n\n进入一个容器\n```\ndocker exec -i -t $dockername /bin/sh\n```\ndocker run的参数说明，例如有用命令启动一个容器\n```\ndocker run --name $\"dDocker\" -d -p 8080:8888 -v /home/tensorflow:/home/jovyan/work jupyter/tensorflow-notebook start-notebook.sh --NotebookApp.token=''\n```\n\n--name 为容器指定一个名字，如果未指定会随机分配\n-d 保持后台运行\n-p 8080:8888 端口映射，8080是宿主机器的端口号，8888是docker端口号，访问时输入 [宿主机器ip：8080]\n-v /home/tensorflow:/work/jovnan 目录映射，可以理解为共享目录。docker容器是临时的，这个参数为了是代码和数据持久化保存。\njupyter/tensorflow-notebook 镜像名称，如果本地不存在，docker会自动从hub.docker.com上获取\n\n常见问题：\n1 Couldn’t connect to Docker daemon at http+unix://var/run/docker.sock - is it running? \n有次重启虚拟机后突然遇到这个问题，解决方法：\n\n```\nsudo vi /etc/default/docker\n```\n\n添加一行\n\n```\nDOCKER_OPTS=\"-H tcp://127.0.0.1:4243 -H unix:///var/run/docker.sock\"\n```\n\n再重启docker服务\n\n```\nsudo service docker restart\n```\n\nnote: 重启机器的之前最好先把运行中的docker容器停了\n","slug":"docker常用命令","published":1,"updated":"2019-06-02T09:19:32.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjweqn1ux0000vwptpyo4r12w","content":"<p>docker的安装以及一些配置参考<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/widuu/chinese_docker/blob/master/installation/ubuntu.md#Ubuntu%E5%AE%89%E8%A3%85Docker</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>目录挂载<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /work</span><br><span class=\"line\">sudo mkfs.ext4 /dev/vdc</span><br><span class=\"line\">sudo mount /dev/vdc /work</span><br></pre></td></tr></table></figure></p>\n<p>或者解除挂载<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount  /dev/vdc /work</span><br></pre></td></tr></table></figure></p>\n<p>查看挂载情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h</span><br></pre></td></tr></table></figure></p>\n<p>可参考<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://gist.github.com/gaoyifan/019ad7766f030ab5be50</span><br></pre></td></tr></table></figure></p>\n<p>更改镜像和容器的保存路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker info | grep &quot;Docker Root Dir&quot; 查看存储位置</span><br><span class=\"line\">sudo vi /etc/default/docker</span><br></pre></td></tr></table></figure></p>\n<p>添加一行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOCKER_OPTS=&quot;-g /mnt/docker&quot;</span><br><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure></p>\n<p>查看docker信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info</span><br></pre></td></tr></table></figure></p>\n<p>查看运行中的容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure></p>\n<p>查看所有容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure></p>\n<p>查看本地镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure></p>\n<p>删除镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $imagename</span><br></pre></td></tr></table></figure></p>\n<p>停止一个正在运行的容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop $dockername</span><br></pre></td></tr></table></figure></p>\n<p>删除所有停止的容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure></p>\n<p>启动一个容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start $dockername</span><br></pre></td></tr></table></figure></p>\n<p>进入一个容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -i -t $dockername /bin/sh</span><br></pre></td></tr></table></figure></p>\n<p>docker run的参数说明，例如有用命令启动一个容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name $&quot;dDocker&quot; -d -p 8080:8888 -v /home/tensorflow:/home/jovyan/work jupyter/tensorflow-notebook start-notebook.sh --NotebookApp.token=&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>–name 为容器指定一个名字，如果未指定会随机分配<br>-d 保持后台运行<br>-p 8080:8888 端口映射，8080是宿主机器的端口号，8888是docker端口号，访问时输入 [宿主机器ip：8080]<br>-v /home/tensorflow:/work/jovnan 目录映射，可以理解为共享目录。docker容器是临时的，这个参数为了是代码和数据持久化保存。<br>jupyter/tensorflow-notebook 镜像名称，如果本地不存在，docker会自动从hub.docker.com上获取</p>\n<p>常见问题：<br>1 Couldn’t connect to Docker daemon at http+unix://var/run/docker.sock - is it running?<br>有次重启虚拟机后突然遇到这个问题，解决方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/default/docker</span><br></pre></td></tr></table></figure>\n<p>添加一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOCKER_OPTS=&quot;-H tcp://127.0.0.1:4243 -H unix:///var/run/docker.sock&quot;</span><br></pre></td></tr></table></figure>\n<p>再重启docker服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure>\n<p>note: 重启机器的之前最好先把运行中的docker容器停了</p>\n","site":{"data":{}},"excerpt":"<p>docker的安装以及一些配置参考<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/widuu/chinese_docker/blob/master/installation/ubuntu.md#Ubuntu%E5%AE%89%E8%A3%85Docker</span><br></pre></td></tr></table></figure></p>","more":"<p>目录挂载<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /work</span><br><span class=\"line\">sudo mkfs.ext4 /dev/vdc</span><br><span class=\"line\">sudo mount /dev/vdc /work</span><br></pre></td></tr></table></figure></p>\n<p>或者解除挂载<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount  /dev/vdc /work</span><br></pre></td></tr></table></figure></p>\n<p>查看挂载情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h</span><br></pre></td></tr></table></figure></p>\n<p>可参考<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://gist.github.com/gaoyifan/019ad7766f030ab5be50</span><br></pre></td></tr></table></figure></p>\n<p>更改镜像和容器的保存路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker info | grep &quot;Docker Root Dir&quot; 查看存储位置</span><br><span class=\"line\">sudo vi /etc/default/docker</span><br></pre></td></tr></table></figure></p>\n<p>添加一行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOCKER_OPTS=&quot;-g /mnt/docker&quot;</span><br><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure></p>\n<p>查看docker信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info</span><br></pre></td></tr></table></figure></p>\n<p>查看运行中的容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure></p>\n<p>查看所有容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure></p>\n<p>查看本地镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure></p>\n<p>删除镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $imagename</span><br></pre></td></tr></table></figure></p>\n<p>停止一个正在运行的容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop $dockername</span><br></pre></td></tr></table></figure></p>\n<p>删除所有停止的容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure></p>\n<p>启动一个容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start $dockername</span><br></pre></td></tr></table></figure></p>\n<p>进入一个容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -i -t $dockername /bin/sh</span><br></pre></td></tr></table></figure></p>\n<p>docker run的参数说明，例如有用命令启动一个容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name $&quot;dDocker&quot; -d -p 8080:8888 -v /home/tensorflow:/home/jovyan/work jupyter/tensorflow-notebook start-notebook.sh --NotebookApp.token=&apos;&apos;</span><br></pre></td></tr></table></figure></p>\n<p>–name 为容器指定一个名字，如果未指定会随机分配<br>-d 保持后台运行<br>-p 8080:8888 端口映射，8080是宿主机器的端口号，8888是docker端口号，访问时输入 [宿主机器ip：8080]<br>-v /home/tensorflow:/work/jovnan 目录映射，可以理解为共享目录。docker容器是临时的，这个参数为了是代码和数据持久化保存。<br>jupyter/tensorflow-notebook 镜像名称，如果本地不存在，docker会自动从hub.docker.com上获取</p>\n<p>常见问题：<br>1 Couldn’t connect to Docker daemon at http+unix://var/run/docker.sock - is it running?<br>有次重启虚拟机后突然遇到这个问题，解决方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/default/docker</span><br></pre></td></tr></table></figure>\n<p>添加一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DOCKER_OPTS=&quot;-H tcp://127.0.0.1:4243 -H unix:///var/run/docker.sock&quot;</span><br></pre></td></tr></table></figure>\n<p>再重启docker服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure>\n<p>note: 重启机器的之前最好先把运行中的docker容器停了</p>"},{"title":"eclipse导入maven web项目注意事项","date":"2017-04-29T07:02:06.000Z","_content":"eclipse导入已经存在的maven web项目还需要进行一些简单的配置，这里记录一下可能遇到的情况。\n\n导入方法：\nFile -> Import -> Maven -> Existing Maven Projects\n\n导入过程可能的报错及解决方法\n<!-- more --> \n1 pom.xml\n报错：Plugin execution not covered by lifecycle configuration\n解决方法：在\n```\n<build>和<plugins>\n```\n之间加入\n```\n<pluginManagement>\n```\n如果build出错，在\n```\n<build></build>\n```\n之间找个地方加入\n```\n<defaultGoal>compile</defaultGoal>\n```\n\n2 环境问题\n出现的错误如下\n![](http://i4.buimg.com/4851/5aa0b41fc757410e.png)\n解决方法：\n(1) Properties -> Java Build Path \n\t修改JRE版本为1.8\n(2) Properties ->JavaCompiler  \n\t看一下Compiler compliance level 的版本是否为1.8，如果不是修改为1.8\n(3) Properties -> Project Facets\n\t勾选Danamic Web Module Versions为3.0\n\t勾选Java为 1.8\n\t如下图所示：\n\t![](http://i4.buimg.com/4851/d37f161f8918df45.png)\n(4) Properties -> Deployment Assembly \n\t查看是否有加入Maven Dependencies以及对应的路径是否一样\n\t示例：\n\t![](http://i4.buimg.com/4851/22e55d515aa09e6f.png)\n\n3 如果发现Properties中没有Deployment Assembly\n解决方法：\n(1) 在该项目的工作区文件夹找到.project文件,用文本编辑器打开\n(2) 在文件内添加如下代码：\n```\n<nature>org.eclipse.wst.common.modulecore.ModuleCoreNature</nature>\n```\n(3) 重启eclipse可以在Properties中看到Deployment Assembly\n\n以上配置好之后可以试着Run as -> Run On Server,看是否能在tomcat中跑起来。","source":"_posts/eclipse导入maven-web项目注意事项.md","raw":"---\ntitle: eclipse导入maven web项目注意事项\ndate: 2017-04-29 15:02:06\ncategories:\n\t - environment\ntags: [web,eclipse,java]\n---\neclipse导入已经存在的maven web项目还需要进行一些简单的配置，这里记录一下可能遇到的情况。\n\n导入方法：\nFile -> Import -> Maven -> Existing Maven Projects\n\n导入过程可能的报错及解决方法\n<!-- more --> \n1 pom.xml\n报错：Plugin execution not covered by lifecycle configuration\n解决方法：在\n```\n<build>和<plugins>\n```\n之间加入\n```\n<pluginManagement>\n```\n如果build出错，在\n```\n<build></build>\n```\n之间找个地方加入\n```\n<defaultGoal>compile</defaultGoal>\n```\n\n2 环境问题\n出现的错误如下\n![](http://i4.buimg.com/4851/5aa0b41fc757410e.png)\n解决方法：\n(1) Properties -> Java Build Path \n\t修改JRE版本为1.8\n(2) Properties ->JavaCompiler  \n\t看一下Compiler compliance level 的版本是否为1.8，如果不是修改为1.8\n(3) Properties -> Project Facets\n\t勾选Danamic Web Module Versions为3.0\n\t勾选Java为 1.8\n\t如下图所示：\n\t![](http://i4.buimg.com/4851/d37f161f8918df45.png)\n(4) Properties -> Deployment Assembly \n\t查看是否有加入Maven Dependencies以及对应的路径是否一样\n\t示例：\n\t![](http://i4.buimg.com/4851/22e55d515aa09e6f.png)\n\n3 如果发现Properties中没有Deployment Assembly\n解决方法：\n(1) 在该项目的工作区文件夹找到.project文件,用文本编辑器打开\n(2) 在文件内添加如下代码：\n```\n<nature>org.eclipse.wst.common.modulecore.ModuleCoreNature</nature>\n```\n(3) 重启eclipse可以在Properties中看到Deployment Assembly\n\n以上配置好之后可以试着Run as -> Run On Server,看是否能在tomcat中跑起来。","slug":"eclipse导入maven-web项目注意事项","published":1,"updated":"2019-06-02T09:19:32.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjweqn1v10002vwpt66bu035b","content":"<p>eclipse导入已经存在的maven web项目还需要进行一些简单的配置，这里记录一下可能遇到的情况。</p>\n<p>导入方法：<br>File -&gt; Import -&gt; Maven -&gt; Existing Maven Projects</p>\n<p>导入过程可能的报错及解决方法<br><a id=\"more\"></a><br>1 pom.xml<br>报错：Plugin execution not covered by lifecycle configuration<br>解决方法：在<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;和&lt;plugins&gt;</span><br></pre></td></tr></table></figure></p>\n<p>之间加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pluginManagement&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果build出错，在<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;&lt;/build&gt;</span><br></pre></td></tr></table></figure></p>\n<p>之间找个地方加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;defaultGoal&gt;compile&lt;/defaultGoal&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2 环境问题<br>出现的错误如下<br><img src=\"http://i4.buimg.com/4851/5aa0b41fc757410e.png\" alt><br>解决方法：<br>(1) Properties -&gt; Java Build Path<br>    修改JRE版本为1.8<br>(2) Properties -&gt;JavaCompiler<br>    看一下Compiler compliance level 的版本是否为1.8，如果不是修改为1.8<br>(3) Properties -&gt; Project Facets<br>    勾选Danamic Web Module Versions为3.0<br>    勾选Java为 1.8<br>    如下图所示：<br>    <img src=\"http://i4.buimg.com/4851/d37f161f8918df45.png\" alt><br>(4) Properties -&gt; Deployment Assembly<br>    查看是否有加入Maven Dependencies以及对应的路径是否一样<br>    示例：<br>    <img src=\"http://i4.buimg.com/4851/22e55d515aa09e6f.png\" alt></p>\n<p>3 如果发现Properties中没有Deployment Assembly<br>解决方法：<br>(1) 在该项目的工作区文件夹找到.project文件,用文本编辑器打开<br>(2) 在文件内添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;nature&gt;org.eclipse.wst.common.modulecore.ModuleCoreNature&lt;/nature&gt;</span><br></pre></td></tr></table></figure></p>\n<p>(3) 重启eclipse可以在Properties中看到Deployment Assembly</p>\n<p>以上配置好之后可以试着Run as -&gt; Run On Server,看是否能在tomcat中跑起来。</p>\n","site":{"data":{}},"excerpt":"<p>eclipse导入已经存在的maven web项目还需要进行一些简单的配置，这里记录一下可能遇到的情况。</p>\n<p>导入方法：<br>File -&gt; Import -&gt; Maven -&gt; Existing Maven Projects</p>\n<p>导入过程可能的报错及解决方法<br>","more":"<br>1 pom.xml<br>报错：Plugin execution not covered by lifecycle configuration<br>解决方法：在<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;和&lt;plugins&gt;</span><br></pre></td></tr></table></figure></p>\n<p>之间加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pluginManagement&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果build出错，在<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;&lt;/build&gt;</span><br></pre></td></tr></table></figure></p>\n<p>之间找个地方加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;defaultGoal&gt;compile&lt;/defaultGoal&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2 环境问题<br>出现的错误如下<br><img src=\"http://i4.buimg.com/4851/5aa0b41fc757410e.png\" alt><br>解决方法：<br>(1) Properties -&gt; Java Build Path<br>    修改JRE版本为1.8<br>(2) Properties -&gt;JavaCompiler<br>    看一下Compiler compliance level 的版本是否为1.8，如果不是修改为1.8<br>(3) Properties -&gt; Project Facets<br>    勾选Danamic Web Module Versions为3.0<br>    勾选Java为 1.8<br>    如下图所示：<br>    <img src=\"http://i4.buimg.com/4851/d37f161f8918df45.png\" alt><br>(4) Properties -&gt; Deployment Assembly<br>    查看是否有加入Maven Dependencies以及对应的路径是否一样<br>    示例：<br>    <img src=\"http://i4.buimg.com/4851/22e55d515aa09e6f.png\" alt></p>\n<p>3 如果发现Properties中没有Deployment Assembly<br>解决方法：<br>(1) 在该项目的工作区文件夹找到.project文件,用文本编辑器打开<br>(2) 在文件内添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;nature&gt;org.eclipse.wst.common.modulecore.ModuleCoreNature&lt;/nature&gt;</span><br></pre></td></tr></table></figure></p>\n<p>(3) 重启eclipse可以在Properties中看到Deployment Assembly</p>\n<p>以上配置好之后可以试着Run as -&gt; Run On Server,看是否能在tomcat中跑起来。</p>"},{"title":"mysql一种千万数量级表的join方法","date":"2017-07-18T12:25:52.000Z","_content":"mysql中, join, left join, right join都可以将两张表连接起来，但如果表中的数据太多，例如两张表中都有1000w+的数据，直接join一定会出错。\n<!-- more --> \n一种批量处理的方法是，每次从一张表中load若干行数据（limit m,n），和另一张做join, 结果保存到一张新表里。\n可以写一个程序或脚本来处理，基本语句如下：\n```\nsql1 = \"insert ignore into QA select t.id,t.title, t.body, Answers.body,t.tags from (select Questions.id,Questions.title,Questions.body,Questions.answerid,Questions.tags from Questions limit \"\nsql2 = \",10000) as t left join Answers on t.answerid=Answers.id\"\ni=0\nwhile(i<maxlen):\n\texesql=sql1+str(i)+sql2\n\ti=i+10000\n\tcur.execute(exesql)\n\tconn.commit()\n```","source":"_posts/mysql一种千万数量级表的join方法.md","raw":"---\ntitle: mysql一种千万数量级表的join方法\ndate: 2017-07-18 20:25:52\ncategories:\n\t - performance\ntags: mysql\n---\nmysql中, join, left join, right join都可以将两张表连接起来，但如果表中的数据太多，例如两张表中都有1000w+的数据，直接join一定会出错。\n<!-- more --> \n一种批量处理的方法是，每次从一张表中load若干行数据（limit m,n），和另一张做join, 结果保存到一张新表里。\n可以写一个程序或脚本来处理，基本语句如下：\n```\nsql1 = \"insert ignore into QA select t.id,t.title, t.body, Answers.body,t.tags from (select Questions.id,Questions.title,Questions.body,Questions.answerid,Questions.tags from Questions limit \"\nsql2 = \",10000) as t left join Answers on t.answerid=Answers.id\"\ni=0\nwhile(i<maxlen):\n\texesql=sql1+str(i)+sql2\n\ti=i+10000\n\tcur.execute(exesql)\n\tconn.commit()\n```","slug":"mysql一种千万数量级表的join方法","published":1,"updated":"2019-06-02T09:19:32.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjweqn1v50005vwpt5vgrhndy","content":"<p>mysql中, join, left join, right join都可以将两张表连接起来，但如果表中的数据太多，例如两张表中都有1000w+的数据，直接join一定会出错。<br><a id=\"more\"></a><br>一种批量处理的方法是，每次从一张表中load若干行数据（limit m,n），和另一张做join, 结果保存到一张新表里。<br>可以写一个程序或脚本来处理，基本语句如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql1 = &quot;insert ignore into QA select t.id,t.title, t.body, Answers.body,t.tags from (select Questions.id,Questions.title,Questions.body,Questions.answerid,Questions.tags from Questions limit &quot;</span><br><span class=\"line\">sql2 = &quot;,10000) as t left join Answers on t.answerid=Answers.id&quot;</span><br><span class=\"line\">i=0</span><br><span class=\"line\">while(i&lt;maxlen):</span><br><span class=\"line\">\texesql=sql1+str(i)+sql2</span><br><span class=\"line\">\ti=i+10000</span><br><span class=\"line\">\tcur.execute(exesql)</span><br><span class=\"line\">\tconn.commit()</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>mysql中, join, left join, right join都可以将两张表连接起来，但如果表中的数据太多，例如两张表中都有1000w+的数据，直接join一定会出错。<br>","more":"<br>一种批量处理的方法是，每次从一张表中load若干行数据（limit m,n），和另一张做join, 结果保存到一张新表里。<br>可以写一个程序或脚本来处理，基本语句如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql1 = &quot;insert ignore into QA select t.id,t.title, t.body, Answers.body,t.tags from (select Questions.id,Questions.title,Questions.body,Questions.answerid,Questions.tags from Questions limit &quot;</span><br><span class=\"line\">sql2 = &quot;,10000) as t left join Answers on t.answerid=Answers.id&quot;</span><br><span class=\"line\">i=0</span><br><span class=\"line\">while(i&lt;maxlen):</span><br><span class=\"line\">\texesql=sql1+str(i)+sql2</span><br><span class=\"line\">\ti=i+10000</span><br><span class=\"line\">\tcur.execute(exesql)</span><br><span class=\"line\">\tconn.commit()</span><br></pre></td></tr></table></figure></p>"},{"title":"mysql批量插入数据","date":"2017-07-18T12:22:44.000Z","_content":"在SQL中我们通常用如下语句进行数据的插入:\n```\ninsert into tablename (fieldname_1,...,filedname_n) value(value_1,...,value_n);\n```\n<!-- more --> \n但如果我们需要插入的数据量很大，这样的语句必然会出现性能问题。例如，我们需要插入1000w条的数据，那么就需要1000w条insert语句，并且每执行一条语句都需要commit一次才能真正插入到数据库中，其效率可想而知。因此，为解决这一性能瓶颈问题，MYSQL的官方文档也提出了批量插入的解决方法。\n\n我们可以用如下语句进行数据的批量插入：\n```\ninsert into tablename (fieldname_1,...,filedname_n) values (value_1,...,value_n),(value_1,...,value_n),...,(value_1,...,value_n);\n```\n多条数据用value隔开，执行后一次性次commit。\n\n该方法涉及到的问题：\n1  如果用java,请务必使用StringBuilder或者StringBuffered进行字符串拼接，千万不要用String，否则效率会非常低。\n2  如果担心sql语句有最大长度限制，可以查看\n```\nC:\\ProgramData\\MySQL\\MySQL Server 5.7\n```\n文件夹中的my.ini文件（这是个隐藏文件夹），找到max_allowed_packet属性，如果需要进行修改即可。","source":"_posts/mysql批量插入数据.md","raw":"---\ntitle: mysql批量插入数据\ndate: 2017-07-18 20:22:44\ncategories:\n\t - performance\ntags: mysql\n---\n在SQL中我们通常用如下语句进行数据的插入:\n```\ninsert into tablename (fieldname_1,...,filedname_n) value(value_1,...,value_n);\n```\n<!-- more --> \n但如果我们需要插入的数据量很大，这样的语句必然会出现性能问题。例如，我们需要插入1000w条的数据，那么就需要1000w条insert语句，并且每执行一条语句都需要commit一次才能真正插入到数据库中，其效率可想而知。因此，为解决这一性能瓶颈问题，MYSQL的官方文档也提出了批量插入的解决方法。\n\n我们可以用如下语句进行数据的批量插入：\n```\ninsert into tablename (fieldname_1,...,filedname_n) values (value_1,...,value_n),(value_1,...,value_n),...,(value_1,...,value_n);\n```\n多条数据用value隔开，执行后一次性次commit。\n\n该方法涉及到的问题：\n1  如果用java,请务必使用StringBuilder或者StringBuffered进行字符串拼接，千万不要用String，否则效率会非常低。\n2  如果担心sql语句有最大长度限制，可以查看\n```\nC:\\ProgramData\\MySQL\\MySQL Server 5.7\n```\n文件夹中的my.ini文件（这是个隐藏文件夹），找到max_allowed_packet属性，如果需要进行修改即可。","slug":"mysql批量插入数据","published":1,"updated":"2019-06-02T09:19:32.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjweqn1v60006vwptrq58s9ij","content":"<p>在SQL中我们通常用如下语句进行数据的插入:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into tablename (fieldname_1,...,filedname_n) value(value_1,...,value_n);</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a> \n<p>但如果我们需要插入的数据量很大，这样的语句必然会出现性能问题。例如，我们需要插入1000w条的数据，那么就需要1000w条insert语句，并且每执行一条语句都需要commit一次才能真正插入到数据库中，其效率可想而知。因此，为解决这一性能瓶颈问题，MYSQL的官方文档也提出了批量插入的解决方法。</p>\n<p>我们可以用如下语句进行数据的批量插入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into tablename (fieldname_1,...,filedname_n) values (value_1,...,value_n),(value_1,...,value_n),...,(value_1,...,value_n);</span><br></pre></td></tr></table></figure></p>\n<p>多条数据用value隔开，执行后一次性次commit。</p>\n<p>该方法涉及到的问题：<br>1  如果用java,请务必使用StringBuilder或者StringBuffered进行字符串拼接，千万不要用String，否则效率会非常低。<br>2  如果担心sql语句有最大长度限制，可以查看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\ProgramData\\MySQL\\MySQL Server 5.7</span><br></pre></td></tr></table></figure></p>\n<p>文件夹中的my.ini文件（这是个隐藏文件夹），找到max_allowed_packet属性，如果需要进行修改即可。</p>\n","site":{"data":{}},"excerpt":"<p>在SQL中我们通常用如下语句进行数据的插入:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into tablename (fieldname_1,...,filedname_n) value(value_1,...,value_n);</span><br></pre></td></tr></table></figure></p>","more":"<p>但如果我们需要插入的数据量很大，这样的语句必然会出现性能问题。例如，我们需要插入1000w条的数据，那么就需要1000w条insert语句，并且每执行一条语句都需要commit一次才能真正插入到数据库中，其效率可想而知。因此，为解决这一性能瓶颈问题，MYSQL的官方文档也提出了批量插入的解决方法。</p>\n<p>我们可以用如下语句进行数据的批量插入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into tablename (fieldname_1,...,filedname_n) values (value_1,...,value_n),(value_1,...,value_n),...,(value_1,...,value_n);</span><br></pre></td></tr></table></figure></p>\n<p>多条数据用value隔开，执行后一次性次commit。</p>\n<p>该方法涉及到的问题：<br>1  如果用java,请务必使用StringBuilder或者StringBuffered进行字符串拼接，千万不要用String，否则效率会非常低。<br>2  如果担心sql语句有最大长度限制，可以查看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\ProgramData\\MySQL\\MySQL Server 5.7</span><br></pre></td></tr></table></figure></p>\n<p>文件夹中的my.ini文件（这是个隐藏文件夹），找到max_allowed_packet属性，如果需要进行修改即可。</p>"},{"title":"python开发环境配置","date":"2018-06-23T14:03:36.000Z","_content":"\n1 安装virtualenv\n(1) 安装pip\n\n```\nsudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install python-pip\n```\n\n<!-- more -->\n(2) 安装virtualenv\n\n```\nsudo apt-get install python-virtualenv\n```\n\n(3) 创建不同版本python环境\n进入需要虚拟化环境的目录，如\n\n```\ncd /home/yujluo\n```\n\n运行命令\n\n```\nvirtualenv -p /usr/bin/python3 py3env\n```\n-p指定python版本 py3env为虚拟的环境目录\n\n激活环境\n\n```\nsource /home/yujluo/py3env/activate\n```\n\n退出环境\n\n```\ndeactivate\n```\n\n2 使用jupyter notebook\n\n(1) 安装jupyter notebook\npip install jupyter notebook\n\n(2) 开启notebook\n进入工作目录，如\n\n```\ncd /home/yujluo\n```\n\n开启服务\njupyter notebook\n\n(3) 远程访问jupyter notebook\n最简单的是从本地建立一个ssh通道到服务器\n\n```\nssh <用户名>@<ip地址> -L127.0.0.1:1234:127.0.0.1:8888\n```\n然后再本浏览器输入localhost:1234再在服务器上记下token输入就可以使用了。","source":"_posts/python开发环境配置.md","raw":"---\ntitle: python开发环境配置\ndate: 2018-06-23 22:03:36\ncategories:\n\t - environment\ntags: [ubuntu, python]\n---\n\n1 安装virtualenv\n(1) 安装pip\n\n```\nsudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install python-pip\n```\n\n<!-- more -->\n(2) 安装virtualenv\n\n```\nsudo apt-get install python-virtualenv\n```\n\n(3) 创建不同版本python环境\n进入需要虚拟化环境的目录，如\n\n```\ncd /home/yujluo\n```\n\n运行命令\n\n```\nvirtualenv -p /usr/bin/python3 py3env\n```\n-p指定python版本 py3env为虚拟的环境目录\n\n激活环境\n\n```\nsource /home/yujluo/py3env/activate\n```\n\n退出环境\n\n```\ndeactivate\n```\n\n2 使用jupyter notebook\n\n(1) 安装jupyter notebook\npip install jupyter notebook\n\n(2) 开启notebook\n进入工作目录，如\n\n```\ncd /home/yujluo\n```\n\n开启服务\njupyter notebook\n\n(3) 远程访问jupyter notebook\n最简单的是从本地建立一个ssh通道到服务器\n\n```\nssh <用户名>@<ip地址> -L127.0.0.1:1234:127.0.0.1:8888\n```\n然后再本浏览器输入localhost:1234再在服务器上记下token输入就可以使用了。","slug":"python开发环境配置","published":1,"updated":"2019-06-02T09:19:32.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjweqn1v70007vwptyr4urgl4","content":"<p>1 安装virtualenv<br>(1) 安装pip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br><span class=\"line\">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>(2) 安装virtualenv</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-virtualenv</span><br></pre></td></tr></table></figure>\n<p>(3) 创建不同版本python环境<br>进入需要虚拟化环境的目录，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/yujluo</span><br></pre></td></tr></table></figure>\n<p>运行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv -p /usr/bin/python3 py3env</span><br></pre></td></tr></table></figure>\n<p>-p指定python版本 py3env为虚拟的环境目录</p>\n<p>激活环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /home/yujluo/py3env/activate</span><br></pre></td></tr></table></figure>\n<p>退出环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n<p>2 使用jupyter notebook</p>\n<p>(1) 安装jupyter notebook<br>pip install jupyter notebook</p>\n<p>(2) 开启notebook<br>进入工作目录，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/yujluo</span><br></pre></td></tr></table></figure>\n<p>开启服务<br>jupyter notebook</p>\n<p>(3) 远程访问jupyter notebook<br>最简单的是从本地建立一个ssh通道到服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh &lt;用户名&gt;@&lt;ip地址&gt; -L127.0.0.1:1234:127.0.0.1:8888</span><br></pre></td></tr></table></figure>\n<p>然后再本浏览器输入localhost:1234再在服务器上记下token输入就可以使用了。</p>\n","site":{"data":{}},"excerpt":"<p>1 安装virtualenv<br>(1) 安装pip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br><span class=\"line\">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure>","more":"<p>(2) 安装virtualenv</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-virtualenv</span><br></pre></td></tr></table></figure>\n<p>(3) 创建不同版本python环境<br>进入需要虚拟化环境的目录，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/yujluo</span><br></pre></td></tr></table></figure>\n<p>运行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv -p /usr/bin/python3 py3env</span><br></pre></td></tr></table></figure>\n<p>-p指定python版本 py3env为虚拟的环境目录</p>\n<p>激活环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /home/yujluo/py3env/activate</span><br></pre></td></tr></table></figure>\n<p>退出环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n<p>2 使用jupyter notebook</p>\n<p>(1) 安装jupyter notebook<br>pip install jupyter notebook</p>\n<p>(2) 开启notebook<br>进入工作目录，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/yujluo</span><br></pre></td></tr></table></figure>\n<p>开启服务<br>jupyter notebook</p>\n<p>(3) 远程访问jupyter notebook<br>最简单的是从本地建立一个ssh通道到服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh &lt;用户名&gt;@&lt;ip地址&gt; -L127.0.0.1:1234:127.0.0.1:8888</span><br></pre></td></tr></table></figure>\n<p>然后再本浏览器输入localhost:1234再在服务器上记下token输入就可以使用了。</p>"},{"title":"ttt","date":"2019-06-02T08:32:29.000Z","_content":"","source":"_posts/ttt.md","raw":"---\ntitle: ttt\ndate: 2019-06-02 16:32:29\ntags:\n---\n","slug":"ttt","published":1,"updated":"2019-06-02T09:19:32.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjweqn1v8000avwptzlis21k2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"ubuntu14.04安装fasttext","date":"2017-06-16T14:40:06.000Z","_content":"```\nsudo apt-get install python-numpy\nsudo apt-get install python-scipy\n```\n<!-- more --> \n安装pip\n```\nwget https://bootstrap.pypa.io/get-pip.py\npython get-pip.py\npip -V #查看pip版本\n```\n\n安装Cpython\n```\nsudo pip install Cython --install-option=\"--no-cython-compile\"\n```\n\n安装fasttext\n```\nsudo pip install fasttext\n```","source":"_posts/ubuntu14-04安装fasttext.md","raw":"---\ntitle: ubuntu14.04安装fasttext\ndate: 2017-06-16 22:40:06\ncategories:\n\t - environment\ntags: [linux,python,deeplearning]\n---\n```\nsudo apt-get install python-numpy\nsudo apt-get install python-scipy\n```\n<!-- more --> \n安装pip\n```\nwget https://bootstrap.pypa.io/get-pip.py\npython get-pip.py\npip -V #查看pip版本\n```\n\n安装Cpython\n```\nsudo pip install Cython --install-option=\"--no-cython-compile\"\n```\n\n安装fasttext\n```\nsudo pip install fasttext\n```","slug":"ubuntu14-04安装fasttext","published":1,"updated":"2019-06-02T09:19:32.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjweqn1va000bvwpt92ehwn13","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-numpy</span><br><span class=\"line\">sudo apt-get install python-scipy</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a> \n<p>安装pip<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class=\"line\">python get-pip.py</span><br><span class=\"line\">pip -V #查看pip版本</span><br></pre></td></tr></table></figure></p>\n<p>安装Cpython<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install Cython --install-option=&quot;--no-cython-compile&quot;</span><br></pre></td></tr></table></figure></p>\n<p>安装fasttext<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install fasttext</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-numpy</span><br><span class=\"line\">sudo apt-get install python-scipy</span><br></pre></td></tr></table></figure>","more":"<p>安装pip<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class=\"line\">python get-pip.py</span><br><span class=\"line\">pip -V #查看pip版本</span><br></pre></td></tr></table></figure></p>\n<p>安装Cpython<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install Cython --install-option=&quot;--no-cython-compile&quot;</span><br></pre></td></tr></table></figure></p>\n<p>安装fasttext<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install fasttext</span><br></pre></td></tr></table></figure></p>"},{"title":"ubuntu安装mysql并开启远程连接","date":"2017-06-16T14:53:19.000Z","_content":"```\nsudo apt-get install mysql-server\nsudo apt-get install mysql-client\nsudo apt-get install libmysqlclient-dev\n```\n<!-- more --> \n安装过程中会提示设置密码什么的，注意设置了不要忘了，安装完成之后可以使用如下命令来检查是否安装成功：\n```\nsudo netstat -tap | grep mysql\n```\n\n通过上述命令检查之后，如果看到有mysql 的socket处于 listen 状态则表示安装成功。\n登陆mysql数据库可以通过如下命令：\n```\nmysql -u root -p\n```\n\n开启远程服务\n\n例如，你想root使用123456从任何主机连接到mysql服务器。\n\n1 首先，赋给root用户权限\n```\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;\nFLUSH PRIVILEGES;\n```\n\n2 修改my.cnf文件\n\n编辑文件\n```\nsudo vi /etc/mysql/my.cnf\n```\n注释掉这句，127.0.0.1是只允许本地访问\n```\n#bind-address = 127.0.0.1\n```\n\n3 重启mysql服务\n```\nsudo /etc/init.d/mysql restart\n```","source":"_posts/ubuntu安装mysql并开启远程连接.md","raw":"---\ntitle: ubuntu安装mysql并开启远程连接\ndate: 2017-06-16 22:53:19\ncategories:\n\t - environment\ntags: [linux, mysql]\n---\n```\nsudo apt-get install mysql-server\nsudo apt-get install mysql-client\nsudo apt-get install libmysqlclient-dev\n```\n<!-- more --> \n安装过程中会提示设置密码什么的，注意设置了不要忘了，安装完成之后可以使用如下命令来检查是否安装成功：\n```\nsudo netstat -tap | grep mysql\n```\n\n通过上述命令检查之后，如果看到有mysql 的socket处于 listen 状态则表示安装成功。\n登陆mysql数据库可以通过如下命令：\n```\nmysql -u root -p\n```\n\n开启远程服务\n\n例如，你想root使用123456从任何主机连接到mysql服务器。\n\n1 首先，赋给root用户权限\n```\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;\nFLUSH PRIVILEGES;\n```\n\n2 修改my.cnf文件\n\n编辑文件\n```\nsudo vi /etc/mysql/my.cnf\n```\n注释掉这句，127.0.0.1是只允许本地访问\n```\n#bind-address = 127.0.0.1\n```\n\n3 重启mysql服务\n```\nsudo /etc/init.d/mysql restart\n```","slug":"ubuntu安装mysql并开启远程连接","published":1,"updated":"2019-06-02T09:19:32.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjweqn1vb000fvwpt0c6llazy","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mysql-server</span><br><span class=\"line\">sudo apt-get install mysql-client</span><br><span class=\"line\">sudo apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a> \n<p>安装过程中会提示设置密码什么的，注意设置了不要忘了，安装完成之后可以使用如下命令来检查是否安装成功：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo netstat -tap | grep mysql</span><br></pre></td></tr></table></figure></p>\n<p>通过上述命令检查之后，如果看到有mysql 的socket处于 listen 状态则表示安装成功。<br>登陆mysql数据库可以通过如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure></p>\n<p>开启远程服务</p>\n<p>例如，你想root使用123456从任何主机连接到mysql服务器。</p>\n<p>1 首先，赋给root用户权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p>\n<p>2 修改my.cnf文件</p>\n<p>编辑文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure></p>\n<p>注释掉这句，127.0.0.1是只允许本地访问<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#bind-address = 127.0.0.1</span><br></pre></td></tr></table></figure></p>\n<p>3 重启mysql服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mysql-server</span><br><span class=\"line\">sudo apt-get install mysql-client</span><br><span class=\"line\">sudo apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure>","more":"<p>安装过程中会提示设置密码什么的，注意设置了不要忘了，安装完成之后可以使用如下命令来检查是否安装成功：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo netstat -tap | grep mysql</span><br></pre></td></tr></table></figure></p>\n<p>通过上述命令检查之后，如果看到有mysql 的socket处于 listen 状态则表示安装成功。<br>登陆mysql数据库可以通过如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure></p>\n<p>开启远程服务</p>\n<p>例如，你想root使用123456从任何主机连接到mysql服务器。</p>\n<p>1 首先，赋给root用户权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p>\n<p>2 修改my.cnf文件</p>\n<p>编辑文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure></p>\n<p>注释掉这句，127.0.0.1是只允许本地访问<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#bind-address = 127.0.0.1</span><br></pre></td></tr></table></figure></p>\n<p>3 重启mysql服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure></p>"},{"title":"ubuntu mysql修改数据存储位置","date":"2017-08-18T12:30:21.000Z","_content":"\n1 登陆mysql查看数据存储路径\n```\nmysql -uroot -p\nshow variables like '%datadir%';\n```\n\n<!-- more --> \n\n2 建立新的存储路径\n```\nmkdir -p /data/mysql\n```\n\n3 复制原有的数据到新的存储路径（不要用mv！）\n```\ncp -R /var/lib/mysql/. /data/mysql  #如果有隐藏文件要用.，不能用*\n```\n\n4 修改文件夹权限\n```\nsudo chown -R mysql:mysql /data/mysql\n```\n\n5 修改配置文件\n```\nsudo vi /etc/mysql/my.cnf\n```\n\n修改\n```\ndatadir = /data/mysql\n```\n\n\n6 修改启动文件\n```\nsudo vi /etc/apparmor.d/usr.sbin.mysqld\n```\n\n修改\n```\n/var/lib/mysql r,\n/var/lib/mysql/** rwk,\n```\n\n为\n```\n/data/mysql r,\n/data/mysql/** rwk,\n```\n\n7 重启服务\n\n```\nsudo /etc/init.d/apparmor restart\nsudo /etc/init.d/mysql restart\n```","source":"_posts/ubuntu系统mysql修改数据存储位置.md","raw":"---\ntitle: ubuntu mysql修改数据存储位置\ndate: 2017-08-18 20:30:21\ncategories:\n\t - environment\ntags: [linux, mysql]\n---\n\n1 登陆mysql查看数据存储路径\n```\nmysql -uroot -p\nshow variables like '%datadir%';\n```\n\n<!-- more --> \n\n2 建立新的存储路径\n```\nmkdir -p /data/mysql\n```\n\n3 复制原有的数据到新的存储路径（不要用mv！）\n```\ncp -R /var/lib/mysql/. /data/mysql  #如果有隐藏文件要用.，不能用*\n```\n\n4 修改文件夹权限\n```\nsudo chown -R mysql:mysql /data/mysql\n```\n\n5 修改配置文件\n```\nsudo vi /etc/mysql/my.cnf\n```\n\n修改\n```\ndatadir = /data/mysql\n```\n\n\n6 修改启动文件\n```\nsudo vi /etc/apparmor.d/usr.sbin.mysqld\n```\n\n修改\n```\n/var/lib/mysql r,\n/var/lib/mysql/** rwk,\n```\n\n为\n```\n/data/mysql r,\n/data/mysql/** rwk,\n```\n\n7 重启服务\n\n```\nsudo /etc/init.d/apparmor restart\nsudo /etc/init.d/mysql restart\n```","slug":"ubuntu系统mysql修改数据存储位置","published":1,"updated":"2019-06-02T09:19:32.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjweqn1vd000hvwptxdpvhwm5","content":"<p>1 登陆mysql查看数据存储路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\">show variables like &apos;%datadir%&apos;;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a> \n<p>2 建立新的存储路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/mysql</span><br></pre></td></tr></table></figure></p>\n<p>3 复制原有的数据到新的存储路径（不要用mv！）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -R /var/lib/mysql/. /data/mysql  #如果有隐藏文件要用.，不能用*</span><br></pre></td></tr></table></figure></p>\n<p>4 修改文件夹权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R mysql:mysql /data/mysql</span><br></pre></td></tr></table></figure></p>\n<p>5 修改配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">datadir = /data/mysql</span><br></pre></td></tr></table></figure></p>\n<p>6 修改启动文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/apparmor.d/usr.sbin.mysqld</span><br></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/lib/mysql r,</span><br><span class=\"line\">/var/lib/mysql/** rwk,</span><br></pre></td></tr></table></figure></p>\n<p>为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/data/mysql r,</span><br><span class=\"line\">/data/mysql/** rwk,</span><br></pre></td></tr></table></figure></p>\n<p>7 重启服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/apparmor restart</span><br><span class=\"line\">sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>1 登陆mysql查看数据存储路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\">show variables like &apos;%datadir%&apos;;</span><br></pre></td></tr></table></figure></p>","more":"<p>2 建立新的存储路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/mysql</span><br></pre></td></tr></table></figure></p>\n<p>3 复制原有的数据到新的存储路径（不要用mv！）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -R /var/lib/mysql/. /data/mysql  #如果有隐藏文件要用.，不能用*</span><br></pre></td></tr></table></figure></p>\n<p>4 修改文件夹权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R mysql:mysql /data/mysql</span><br></pre></td></tr></table></figure></p>\n<p>5 修改配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">datadir = /data/mysql</span><br></pre></td></tr></table></figure></p>\n<p>6 修改启动文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/apparmor.d/usr.sbin.mysqld</span><br></pre></td></tr></table></figure></p>\n<p>修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/lib/mysql r,</span><br><span class=\"line\">/var/lib/mysql/** rwk,</span><br></pre></td></tr></table></figure></p>\n<p>为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/data/mysql r,</span><br><span class=\"line\">/data/mysql/** rwk,</span><br></pre></td></tr></table></figure></p>\n<p>7 重启服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/apparmor restart</span><br><span class=\"line\">sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure>"},{"title":"记事本编码问题小记","date":"2017-04-02T08:21:52.000Z","_content":"最近在跑论文实验，经常需要进行一些文本的存储和转移，一般都是用python写个脚本来处理。在这个过程中大的问题还没遇到过，但一些小坑还是经常会踩，而且好几次明明是上次遇到过但又忘了，解决的过程还是很浪费时间的。所以把它们记录下来，避免下次遇到类似情况的时候还要去查。\n\n感觉python3.x对中文还是比较友好的。\n\n1 关于Windows记事本的ANSI,Unicode,UTF-8三种编码模式\n看了一篇知乎的回答，感觉讲的很明白。https://www.zhihu.com/question/20650946\nANSI：对应当前系统 locale 的遗留（legacy）编码。\nUnicode:带有 BOM 的小端序 UTF-16。\nUTF-8:带 BOM 的 UTF-8.\n<!-- more --> \n注：所谓BOM，即字节序标记(Byte Order Mark)，是Unicode规范中的概念，Windows就是使用BOM来标记文本文件的编码方式的。\n\n之前以为把txt文件保存为UTF-8就万事大吉了，直到用Python把txt中的内容读出并print出来后发现每个文件内容开头都有一个“ufeff”字符串，查了之后才知道原来记事本保存的UTF-8是带BOM的UTF-8。这个小问题有时候还是会影响文本处理的，解决的办法是用专业的文本编辑器打开，然后保存为不带BOM的UTF-8格式。如果要批处理的话到网上下个小程序好了。\n\n知乎回答中说UTF-8是兼容性最好的编码，为解决Window的BOM问题建议尽量用专业文本编辑器不要用记事本。\n\n转载：\nASCII是古老的编码，那个时候还不区分字符集和编码，基本可以看作合二为一的东西。\nUnicode严格来说是字符集，可以有多种编码。\nUTF-8是一种Unicode的编码。\n\n2 txt文件编码批量转换\n之前有时候需要进行一些文件的批量转码，比如ANSI转UTF-8，不过既然记事本的UTF-8编码是带BOM的这好像也没什么用了，还是用其他工具来转化吧。\n```\n    of=open(openFilePath,\"r\",encoding='gb18030')\n    sf=open(saveFilePath,\"w\",encoding=\"utf-8\")\n    sf.write(of.read())\n```\n\n3 文件夹中文件的遍历\n```\n\timport ps\n\tpath='xxx'\n\tfiles=os.listdir(path)\n\tfor file in files:\n\t\tf=open(path+file,'r',encoding='utf-8')\n\t\txxx\n```","source":"_posts/记事本编码问题小记.md","raw":"---\ntitle: 记事本编码问题小记\ndate: 2017-04-02 16:21:52\ncategories:\n\t - environment\ntags: tool\n---\n最近在跑论文实验，经常需要进行一些文本的存储和转移，一般都是用python写个脚本来处理。在这个过程中大的问题还没遇到过，但一些小坑还是经常会踩，而且好几次明明是上次遇到过但又忘了，解决的过程还是很浪费时间的。所以把它们记录下来，避免下次遇到类似情况的时候还要去查。\n\n感觉python3.x对中文还是比较友好的。\n\n1 关于Windows记事本的ANSI,Unicode,UTF-8三种编码模式\n看了一篇知乎的回答，感觉讲的很明白。https://www.zhihu.com/question/20650946\nANSI：对应当前系统 locale 的遗留（legacy）编码。\nUnicode:带有 BOM 的小端序 UTF-16。\nUTF-8:带 BOM 的 UTF-8.\n<!-- more --> \n注：所谓BOM，即字节序标记(Byte Order Mark)，是Unicode规范中的概念，Windows就是使用BOM来标记文本文件的编码方式的。\n\n之前以为把txt文件保存为UTF-8就万事大吉了，直到用Python把txt中的内容读出并print出来后发现每个文件内容开头都有一个“ufeff”字符串，查了之后才知道原来记事本保存的UTF-8是带BOM的UTF-8。这个小问题有时候还是会影响文本处理的，解决的办法是用专业的文本编辑器打开，然后保存为不带BOM的UTF-8格式。如果要批处理的话到网上下个小程序好了。\n\n知乎回答中说UTF-8是兼容性最好的编码，为解决Window的BOM问题建议尽量用专业文本编辑器不要用记事本。\n\n转载：\nASCII是古老的编码，那个时候还不区分字符集和编码，基本可以看作合二为一的东西。\nUnicode严格来说是字符集，可以有多种编码。\nUTF-8是一种Unicode的编码。\n\n2 txt文件编码批量转换\n之前有时候需要进行一些文件的批量转码，比如ANSI转UTF-8，不过既然记事本的UTF-8编码是带BOM的这好像也没什么用了，还是用其他工具来转化吧。\n```\n    of=open(openFilePath,\"r\",encoding='gb18030')\n    sf=open(saveFilePath,\"w\",encoding=\"utf-8\")\n    sf.write(of.read())\n```\n\n3 文件夹中文件的遍历\n```\n\timport ps\n\tpath='xxx'\n\tfiles=os.listdir(path)\n\tfor file in files:\n\t\tf=open(path+file,'r',encoding='utf-8')\n\t\txxx\n```","slug":"记事本编码问题小记","published":1,"updated":"2019-06-02T09:19:32.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjweqn1vh000mvwpt12u8ypkh","content":"<p>最近在跑论文实验，经常需要进行一些文本的存储和转移，一般都是用python写个脚本来处理。在这个过程中大的问题还没遇到过，但一些小坑还是经常会踩，而且好几次明明是上次遇到过但又忘了，解决的过程还是很浪费时间的。所以把它们记录下来，避免下次遇到类似情况的时候还要去查。</p>\n<p>感觉python3.x对中文还是比较友好的。</p>\n<p>1 关于Windows记事本的ANSI,Unicode,UTF-8三种编码模式<br>看了一篇知乎的回答，感觉讲的很明白。<a href=\"https://www.zhihu.com/question/20650946\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20650946</a><br>ANSI：对应当前系统 locale 的遗留（legacy）编码。<br>Unicode:带有 BOM 的小端序 UTF-16。<br>UTF-8:带 BOM 的 UTF-8.<br><a id=\"more\"></a><br>注：所谓BOM，即字节序标记(Byte Order Mark)，是Unicode规范中的概念，Windows就是使用BOM来标记文本文件的编码方式的。</p>\n<p>之前以为把txt文件保存为UTF-8就万事大吉了，直到用Python把txt中的内容读出并print出来后发现每个文件内容开头都有一个“ufeff”字符串，查了之后才知道原来记事本保存的UTF-8是带BOM的UTF-8。这个小问题有时候还是会影响文本处理的，解决的办法是用专业的文本编辑器打开，然后保存为不带BOM的UTF-8格式。如果要批处理的话到网上下个小程序好了。</p>\n<p>知乎回答中说UTF-8是兼容性最好的编码，为解决Window的BOM问题建议尽量用专业文本编辑器不要用记事本。</p>\n<p>转载：<br>ASCII是古老的编码，那个时候还不区分字符集和编码，基本可以看作合二为一的东西。<br>Unicode严格来说是字符集，可以有多种编码。<br>UTF-8是一种Unicode的编码。</p>\n<p>2 txt文件编码批量转换<br>之前有时候需要进行一些文件的批量转码，比如ANSI转UTF-8，不过既然记事本的UTF-8编码是带BOM的这好像也没什么用了，还是用其他工具来转化吧。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">of=open(openFilePath,&quot;r&quot;,encoding=&apos;gb18030&apos;)</span><br><span class=\"line\">sf=open(saveFilePath,&quot;w&quot;,encoding=&quot;utf-8&quot;)</span><br><span class=\"line\">sf.write(of.read())</span><br></pre></td></tr></table></figure></p>\n<p>3 文件夹中文件的遍历<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import ps</span><br><span class=\"line\">path=&apos;xxx&apos;</span><br><span class=\"line\">files=os.listdir(path)</span><br><span class=\"line\">for file in files:</span><br><span class=\"line\">\tf=open(path+file,&apos;r&apos;,encoding=&apos;utf-8&apos;)</span><br><span class=\"line\">\txxx</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>最近在跑论文实验，经常需要进行一些文本的存储和转移，一般都是用python写个脚本来处理。在这个过程中大的问题还没遇到过，但一些小坑还是经常会踩，而且好几次明明是上次遇到过但又忘了，解决的过程还是很浪费时间的。所以把它们记录下来，避免下次遇到类似情况的时候还要去查。</p>\n<p>感觉python3.x对中文还是比较友好的。</p>\n<p>1 关于Windows记事本的ANSI,Unicode,UTF-8三种编码模式<br>看了一篇知乎的回答，感觉讲的很明白。<a href=\"https://www.zhihu.com/question/20650946\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20650946</a><br>ANSI：对应当前系统 locale 的遗留（legacy）编码。<br>Unicode:带有 BOM 的小端序 UTF-16。<br>UTF-8:带 BOM 的 UTF-8.<br>","more":"<br>注：所谓BOM，即字节序标记(Byte Order Mark)，是Unicode规范中的概念，Windows就是使用BOM来标记文本文件的编码方式的。</p>\n<p>之前以为把txt文件保存为UTF-8就万事大吉了，直到用Python把txt中的内容读出并print出来后发现每个文件内容开头都有一个“ufeff”字符串，查了之后才知道原来记事本保存的UTF-8是带BOM的UTF-8。这个小问题有时候还是会影响文本处理的，解决的办法是用专业的文本编辑器打开，然后保存为不带BOM的UTF-8格式。如果要批处理的话到网上下个小程序好了。</p>\n<p>知乎回答中说UTF-8是兼容性最好的编码，为解决Window的BOM问题建议尽量用专业文本编辑器不要用记事本。</p>\n<p>转载：<br>ASCII是古老的编码，那个时候还不区分字符集和编码，基本可以看作合二为一的东西。<br>Unicode严格来说是字符集，可以有多种编码。<br>UTF-8是一种Unicode的编码。</p>\n<p>2 txt文件编码批量转换<br>之前有时候需要进行一些文件的批量转码，比如ANSI转UTF-8，不过既然记事本的UTF-8编码是带BOM的这好像也没什么用了，还是用其他工具来转化吧。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">of=open(openFilePath,&quot;r&quot;,encoding=&apos;gb18030&apos;)</span><br><span class=\"line\">sf=open(saveFilePath,&quot;w&quot;,encoding=&quot;utf-8&quot;)</span><br><span class=\"line\">sf.write(of.read())</span><br></pre></td></tr></table></figure></p>\n<p>3 文件夹中文件的遍历<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import ps</span><br><span class=\"line\">path=&apos;xxx&apos;</span><br><span class=\"line\">files=os.listdir(path)</span><br><span class=\"line\">for file in files:</span><br><span class=\"line\">\tf=open(path+file,&apos;r&apos;,encoding=&apos;utf-8&apos;)</span><br><span class=\"line\">\txxx</span><br></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjweqn1ux0000vwptpyo4r12w","category_id":"cjweqn1v30003vwptkuwd8lvq","_id":"cjweqn1vb000cvwptiklgjtc1"},{"post_id":"cjweqn1v10002vwpt66bu035b","category_id":"cjweqn1v80008vwptuy2dj2o4","_id":"cjweqn1vf000jvwptyrjgswq4"},{"post_id":"cjweqn1va000bvwpt92ehwn13","category_id":"cjweqn1v80008vwptuy2dj2o4","_id":"cjweqn1vi000nvwptbzc1pwey"},{"post_id":"cjweqn1vb000fvwpt0c6llazy","category_id":"cjweqn1v80008vwptuy2dj2o4","_id":"cjweqn1vi000ovwpt66xhjk9q"},{"post_id":"cjweqn1v50005vwpt5vgrhndy","category_id":"cjweqn1vb000dvwptpi3w55ff","_id":"cjweqn1vj000rvwpt7jk7eidb"},{"post_id":"cjweqn1vd000hvwptxdpvhwm5","category_id":"cjweqn1v80008vwptuy2dj2o4","_id":"cjweqn1vj000svwptdwi0htjp"},{"post_id":"cjweqn1vh000mvwpt12u8ypkh","category_id":"cjweqn1v80008vwptuy2dj2o4","_id":"cjweqn1vk000uvwptgx1kf7gg"},{"post_id":"cjweqn1v60006vwptrq58s9ij","category_id":"cjweqn1vb000dvwptpi3w55ff","_id":"cjweqn1vk000wvwpt9qk4250n"},{"post_id":"cjweqn1v70007vwptyr4urgl4","category_id":"cjweqn1v80008vwptuy2dj2o4","_id":"cjweqn1vk000yvwpt1ws9n4x7"}],"PostTag":[{"post_id":"cjweqn1ux0000vwptpyo4r12w","tag_id":"cjweqn1v40004vwpt3c3f5zne","_id":"cjweqn1vc000gvwpt1p0q1lkz"},{"post_id":"cjweqn1ux0000vwptpyo4r12w","tag_id":"cjweqn1v80009vwptmbfjdx5e","_id":"cjweqn1vf000ivwpt2texjaki"},{"post_id":"cjweqn1v10002vwpt66bu035b","tag_id":"cjweqn1vb000evwpt5i8kjlcf","_id":"cjweqn1vk000vvwptllynuq1l"},{"post_id":"cjweqn1v10002vwpt66bu035b","tag_id":"cjweqn1vg000lvwptrqgub704","_id":"cjweqn1vk000xvwptmj9hi2zy"},{"post_id":"cjweqn1v10002vwpt66bu035b","tag_id":"cjweqn1vj000qvwpteb3lnzsr","_id":"cjweqn1vl0010vwpt80i2cuty"},{"post_id":"cjweqn1v50005vwpt5vgrhndy","tag_id":"cjweqn1vk000tvwpt61xhp7by","_id":"cjweqn1vl0011vwptqxx75v27"},{"post_id":"cjweqn1v60006vwptrq58s9ij","tag_id":"cjweqn1vk000tvwpt61xhp7by","_id":"cjweqn1vl0013vwptyccm6vtv"},{"post_id":"cjweqn1v70007vwptyr4urgl4","tag_id":"cjweqn1vl0012vwpt4h57z0yo","_id":"cjweqn1vm0016vwptlvboszlm"},{"post_id":"cjweqn1v70007vwptyr4urgl4","tag_id":"cjweqn1vm0014vwpt10003g89","_id":"cjweqn1vm0017vwptfx4e4nra"},{"post_id":"cjweqn1va000bvwpt92ehwn13","tag_id":"cjweqn1v40004vwpt3c3f5zne","_id":"cjweqn1vn001avwptbqtzarvm"},{"post_id":"cjweqn1va000bvwpt92ehwn13","tag_id":"cjweqn1vm0014vwpt10003g89","_id":"cjweqn1vn001bvwptaoan03dn"},{"post_id":"cjweqn1va000bvwpt92ehwn13","tag_id":"cjweqn1vm0018vwptk5mqzzyv","_id":"cjweqn1vo001dvwptbk8snrn3"},{"post_id":"cjweqn1vb000fvwpt0c6llazy","tag_id":"cjweqn1v40004vwpt3c3f5zne","_id":"cjweqn1vo001evwpt0n1yumtn"},{"post_id":"cjweqn1vb000fvwpt0c6llazy","tag_id":"cjweqn1vk000tvwpt61xhp7by","_id":"cjweqn1vo001gvwptzvep05aj"},{"post_id":"cjweqn1vd000hvwptxdpvhwm5","tag_id":"cjweqn1v40004vwpt3c3f5zne","_id":"cjweqn1vo001hvwptjpmhyshu"},{"post_id":"cjweqn1vd000hvwptxdpvhwm5","tag_id":"cjweqn1vk000tvwpt61xhp7by","_id":"cjweqn1vo001ivwptcdy4iq2o"},{"post_id":"cjweqn1vh000mvwpt12u8ypkh","tag_id":"cjweqn1vo001fvwpt4rcspyvz","_id":"cjweqn1vo001jvwpt8tw71m4q"}],"Tag":[{"name":"linux","_id":"cjweqn1v40004vwpt3c3f5zne"},{"name":"docker","_id":"cjweqn1v80009vwptmbfjdx5e"},{"name":"web","_id":"cjweqn1vb000evwpt5i8kjlcf"},{"name":"eclipse","_id":"cjweqn1vg000lvwptrqgub704"},{"name":"java","_id":"cjweqn1vj000qvwpteb3lnzsr"},{"name":"mysql","_id":"cjweqn1vk000tvwpt61xhp7by"},{"name":"ubuntu","_id":"cjweqn1vl0012vwpt4h57z0yo"},{"name":"python","_id":"cjweqn1vm0014vwpt10003g89"},{"name":"deeplearning","_id":"cjweqn1vm0018vwptk5mqzzyv"},{"name":"tool","_id":"cjweqn1vo001fvwpt4rcspyvz"}]}}